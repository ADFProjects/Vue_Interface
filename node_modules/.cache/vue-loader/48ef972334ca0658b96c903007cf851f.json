{"remainingRequest":"/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/src/views/PublicOutboundsBox-adf.vue?vue&type=template&id=3b338b51&scoped=true&class=my-application&","dependencies":[{"path":"/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/src/views/PublicOutboundsBox-adf.vue","mtime":1623572950000},{"path":"/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/node_modules/cache-loader/dist/cjs.js","mtime":1615663822203},{"path":"/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1615663860371},{"path":"/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/node_modules/cache-loader/dist/cjs.js","mtime":1615663822203},{"path":"/Users/raghadaziz/Desktop/ADF/CMS/Vue_Interface/node_modules/vue-loader/lib/index.js","mtime":1615663860371}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}